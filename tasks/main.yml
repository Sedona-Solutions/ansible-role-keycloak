---
- name: "Check version of systemd"
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    systemctl --version | head -n1 | cut -d ' ' -f 2
  args:
    executable: /usr/bin/bash
  register: systemd_version_cmd
  changed_when: true

- name: "Retrieve last Keycloak version"
  when: keycloak_version is not defined
  ansible.builtin.uri:
    url: "https://api.github.com/repos/keycloak/keycloak/releases/latest"
    return_content: true
  register: github_response

- name: "Set Keycloak version"
  when: keycloak_version is not defined
  ansible.builtin.set_fact:
    keycloak_version: "{{ github_response.json.name }}"

- name: "Set systemd version"
  ansible.builtin.set_fact:
    ansible_systemd_version: "{{ systemd_version_cmd.stdout | int }}"

- name: "Ensure required utilities are installed"
  ansible.builtin.package:
    name:
      - acl
      - gzip
      - tar
    state: present
  become: true

- name: "Check presence of Keycloak {{ keycloak_version }}"
  ansible.builtin.stat:
    path: "{{ keycloak_install_dir }}/keycloak-{{ keycloak_version }}"
  register: release_folder
  become: true

- name: "Download and install Keycloak {{ keycloak_version }}"
  when: not release_folder.stat.exists
  block:
    - name: "Define Keycloak release URL"
      ansible.builtin.set_fact:
        keycloak_release_download_url: "https://github.com/keycloak/keycloak/releases/download/{{ keycloak_version }}/keycloak-{{ keycloak_version }}.tar.gz"

    - name: "Obtain release archive checksum"
      ansible.builtin.uri:
        url: "{{ keycloak_release_download_url }}.sha1"
        return_content: true
      register: keycloak_release_checksum_file

    - name: "Download Keycloack archive"
      ansible.builtin.get_url:
        url: "{{ keycloak_release_download_url }}"
        dest: "/tmp/keycloak-{{ keycloak_version }}.tar.gz"
        checksum: "sha1:{{ keycloak_release_checksum_file.content }}"
        mode: '0444'

    - name: "Create Keycloak user"
      ansible.builtin.user:
        name: keycloak
        system: true
        home: "{{ keycloak_install_dir }}"
        create_home: true
        state: present
        shell: /bin/nologin
      become: true

    - name: "Ensure install dir exists"
      ansible.builtin.file:
        path: "{{ keycloak_install_dir }}"
        state: directory
        mode: '0775'
        owner: "{{ keycloak_service_user }}"
        group: "{{ keycloak_service_user }}"
      become: true

    - name: "Extract archive"
      ansible.builtin.unarchive:
        src: "/tmp/keycloak-{{ keycloak_version }}.tar.gz"
        dest: "{{ keycloak_install_dir }}"
        remote_src: true
      become: true
      become_user: keycloak

  rescue:
    - name: Cleanup folder to allow new installation
      ansible.builtin.file:
        path: release_folder.stat.path
        state: absent
      become: true


- name: "Check presence of Keycloak {{ keycloak_version }}"
  ansible.builtin.stat:
    path: "{{ keycloak_install_dir }}/keycloak-{{ keycloak_version }}"
  register: release_folder
  become: true
  become_user: "{{ keycloak_service_user }}"

- name: "Check presence of keystore"
  ansible.builtin.stat:
    path: "{{ keycloak_keystore_file }}"
  register: keystore_file

- name: "Build Keycloak configuration"
  when: release_folder.stat.exists
  become: true
  become_user: "{{ keycloak_service_user }}"
  block:
    - name: Set Keycloak release folder
      ansible.builtin.set_fact:
        keycloak_release_folder: "{{ keycloak_install_dir }}/keycloak-{{ keycloak_version }}"

    - name: Set Keycloak config folder
      ansible.builtin.set_fact:
        keycloak_config_folder: "{{ keycloak_release_folder }}/conf"

    - name: "Define hostname to default value"
      when: keycloak_hostname is not defined
      ansible.builtin.set_fact:
        keycloak_hostname: "{{ ansible_fqdn }}"

    - name: "Ensure Keycloak config folder permissions are correct"
      ansible.builtin.file:
        path: "{{ keycloak_config_folder }}"
        owner: "{{ keycloak_service_user }}"
        group: "{{ keycloak_service_user }}"
        mode: '0770'

    - name: "Check presence of init file"
      ansible.builtin.stat:
        path: "{{ keycloak_config_folder }}/.init_done"
      register: init_file

    - name: "Check if Keycloak has already been initialized"
      ansible.builtin.set_fact:
        keycloak_initialized: "{{ init_file.stat.exists }}"

    - name: "Define Keycloak Database parameters"
      ansible.builtin.lineinfile:
        path: "{{ keycloak_config_folder }}/keycloak.conf"
        state: present
        owner: "{{ keycloak_service_user }}"
        group: "{{ keycloak_service_user }}"
        mode: '0660'
        line: "{{ item.line }}"
        insertafter: "{{ item.insertafter }}"
        regexp: "{{ item.regexp }}"
      loop: "{{ db_params }}"
      vars:
        db_params:
          - line: "db={{ keycloak_database_vendor }}"
            insertafter: '#db=postgres'
            regexp: '^db=.*'
          - line: "db-username={{ keycloak_database_user }}"
            insertafter: '#db-username=keycloak'
            regexp: '^db-username=.*'
          - line: "db-password={{ keycloak_database_password }}"
            insertafter: '#db-password=password'
            regexp: '^db-password=.*'
          - line: "db-url-database={{ keycloak_database_name }}"
            insertafter: '#db-url=jdbc:postgresql://localhost/keycloak'
            regexp: '^db-url-database=.*'
          - line: "db-url-host=localhost"
            insertafter: 'db-url-database={{ keycloak_database_name }}'
            regexp: '^db-url-host=.*'

    - name: "Define Keycloak network parameters"
      ansible.builtin.blockinfile:
        path: "{{ keycloak_config_folder }}/keycloak.conf"
        state: present
        owner: "{{ keycloak_service_user }}"
        group: "{{ keycloak_service_user }}"
        mode: '0660'
        marker: "### {mark} HOST ANSIBLE MANAGED BLOCK ###"
        block: |
          hostname={{ keycloak_hostname }}
          https-port={{ keycloak_https_port }}
        insertafter: '#hostname=myhostname'

    - name: "Setup TLS with certificate in keystore"
      when: keystore_file.stat.exists
      block:
        - name: "Ensure correct permissions on keystore"
          become: true
          become_user: root
          ansible.builtin.file:
            path: "{{ keycloak_keystore_file }}"
            owner: "{{ keycloak_service_user }}"
            group: "{{ keycloak_service_user }}"
            mode: '0660'
        - name: "Add keystore-related parameters in Keycloak config"
          ansible.builtin.blockinfile:
            path: "{{ keycloak_config_folder }}/keycloak.conf"
            state: present
            owner: "{{ keycloak_service_user }}"
            group: "{{ keycloak_service_user }}"
            mode: '0660'
            marker: "### {mark} TLS ANSIBLE MANAGED BLOCK ###"
            block: |
              # HTTPS / TLS keystore
              https-key-store-file={{ keycloak_keystore_file }}
              https-key-store-password={{ keycloak_keystore_passphrase }}

    - name: "Setup TLS with certificate & private key"
      when: not keystore_file.stat.exists
      block:
        - name: "Copy SSL Certificate and Key for system without systemd â‰¥ 247"
          become: true
          become_user: root
          when: ansible_systemd_version | int < 247
          ansible.builtin.copy:
            remote_src: true
            src: "{{ item.0 }}"
            dest: "{{ item.1 }}"
            mode: "{{ item.2 }}"
            owner: "{{ keycloak_service_user }}"
            group: "{{ keycloak_service_user }}"
          loop: "{{ files }}"
          vars:
            files:
              - ["{{ keycloak_cert_file }}", "{{ keycloak_config_folder }}/server.crt", '0660']
              - ["{{ keycloak_key_file }}", "{{ keycloak_config_folder }}/server.key", '0600']

        - name: "Setup Certificate & Key for HTTPS (systemd < 247)"
          when: ansible_systemd_version | int < 247
          ansible.builtin.lineinfile:
            path: "{{ keycloak_config_folder }}/keycloak.conf"
            state: present
            owner: "{{ keycloak_service_user }}"
            group: "{{ keycloak_service_user }}"
            mode: '0660'
            line: "{{ item.line }}"
            insertafter: "{{ item.insertafter }}"
            regexp: "{{ item.regexp }}"
          loop: "{{ cert_params }}"
          vars:
            cert_params:
              - line: "https-certificate-file=${kc.home.dir}conf/server.crt"
                insertafter: '#https-certificate-file=${kc.home.dir}conf/server.crt.pem'
                regexp: '^https-certificate-file=.*'
              - line: "https-certificate-key-file=${kc.home.dir}conf/server.key"
                insertafter: '#https-certificate-key-file=${kc.home.dir}conf/server.key.pem'
                regexp: '^https-certificate-key-file=.*'

    - name: "Set Keycloak build command"
      ansible.builtin.set_fact:
        keycloak_build_command: "bin/kc.sh build --db={{ keycloak_database_vendor }} --cache=local"

    - name: "Build optimized Keycloak distribution"
      ansible.builtin.command: "{{ keycloak_build_command }}"
      args:
        chdir: "{{ keycloak_release_folder }}"
      register: build_output
      changed_when: build_output.rc != 0

    - name: "Install initial SystemD service definition"
      become: true
      become_user: root
      ansible.builtin.template:
        src: keycloak.service.j2
        dest: /lib/systemd/system/keycloak.service
        mode: '0644'

    - name: "Start Keycloak to init admin user"
      become: true
      become_user: root
      ansible.builtin.systemd:
        name: keycloak.service
        state: started
        daemon_reload: true

    - name: "Set Keycloak as initialized"
      when: not keycloak_initialized
      ansible.builtin.set_fact:
        keycloak_initialized: true

    - name: "Save initialization marker"
      ansible.builtin.file:
        path: "{{ keycloak_config_folder }}/.init_done"
        state: touch
        mode: '0644'

    - name: "Re-Install SystemD service definition without initialization parameters"
      become: true
      become_user: root
      ansible.builtin.template:
        src: keycloak.service.j2
        dest: /lib/systemd/system/keycloak.service
        mode: '0644'

    - name: "Restart Keycloak to apply service definition changes"
      become: true
      become_user: root
      ansible.builtin.systemd:
        name: keycloak.service
        state: restarted
        enabled: true
        daemon_reload: true
