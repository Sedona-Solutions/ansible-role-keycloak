---
- name: "Define if Keycloak as not initialized by default"
  ansible.builtin.set_fact:
    keycloak_initialized: false

- name: "Define if Keycloak has already been initialized"
  when:
    - ansible_local is defined
    - "'keycloak' in ansible_local.keys()"
    - "ansible_local['keycloak'] is not string"
    - "'initialized' in ansible_local['keycloak']['general'].keys()"
    - "ansible_local['keycloak']['general']['initialized'] | length > 0"
  ansible.builtin.set_fact:
    keycloak_initialized: true

- name: "Define hostname to default value"
  when: keycloak_hostname is not defined
  ansible.builtin.set_fact:
    keycloak_hostname: "{{ ansible_fqdn }}"

- name: "Define temporary config file name"
  ansible.builtin.set_fact:
    keycloak_new_config_file: "{{ keycloak_config_file }}.new"

- name: "Build Keycloak configuration"
  become: true
  become_user: "{{ keycloak_service_user }}"
  module_defaults:
    community.general.ini_file:
      path: "{{ keycloak_new_config_file }}"
      no_extra_spaces: true
      owner: "{{ keycloak_service_user }}"
      group: "{{ keycloak_service_user }}"
      mode: '0600'
  block:
    - name: "Ensure Keycloak config folder permissions are correct"
      ansible.builtin.file:
        path: "{{ keycloak_config_folder }}"
        owner: "{{ keycloak_service_user }}"
        group: "{{ keycloak_service_user }}"
        mode: '0770'

    - name: "Define Database parameters"
      ansible.builtin.include_tasks: configure/database.yml

    - name: "Define Network parameters"
      ansible.builtin.include_tasks: configure/network.yml

    - name: "Define features parameters"
      ansible.builtin.include_tasks: configure/features.yml

    - name: "Define Extra Keycloak Configurations"
      when:
        - keycloak_extra_configurations is defined
        - keycloak_extra_configurations | default({}, true) | dict2items | length > 0
      community.general.ini_file:   # noqa: args[module] risky-file-permissions
        option: "{{ config.key }}"
        value: "{{ config.value | ternary('true', 'false') if config.value == config.value | bool else config.value }}"
      loop: "{{ keycloak_extra_configurations | dict2items }}"
      loop_control:
        loop_var: config

    - name: "Define previous config file name"
      ansible.builtin.set_fact:
        keycloak_previous_config_file: "{{ keycloak_config_file }}.previous"
    - name: "Backup previous config file"
      ansible.builtin.copy:
        remote_src: true
        src: "{{ keycloak_config_file }}"
        dest: "{{ keycloak_previous_config_file }}"
        owner: "{{ keycloak_service_user }}"
        group: "{{ keycloak_service_user }}"
        mode: '0600'

    - name: "Install new config file"
      notify: "Restart Keycloak"
      ansible.builtin.copy:
        remote_src: true
        src: "{{ keycloak_new_config_file }}"
        dest: "{{ keycloak_config_file }}"
        owner: "{{ keycloak_service_user }}"
        group: "{{ keycloak_service_user }}"
        mode: '0600'
    - name: "Build optimized Keycloak distribution"
      when: not keycloak_dev_mode
      ansible.builtin.command: "{{ keycloak_build_command }}"
      args:
        chdir: "{{ keycloak_release_folder }}"
      register: build_output
      changed_when: build_output.rc != 0

  rescue:
    - name: "Restore previous config file"
      when: keycloak_previous_config_file is defined
      notify: "Restart Keycloak"
      ansible.builtin.copy:
        remote_src: true
        src: "{{ keycloak_previous_config_file }}"
        dest: "{{ keycloak_config_file }}"
        owner: "{{ keycloak_service_user }}"
        group: "{{ keycloak_service_user }}"
        mode: '0600'
    - name: "Configuration keycloak fails"
      ansible.builtin.fail:
        msg: "Configuration keycloak fails with file : {{ keycloak_new_config_file }}"

- name: "Cleanup temporary config file"
  ansible.builtin.file:
    state: absent
    path: "{{ keycloak_new_config_file }}"
